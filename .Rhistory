# can take as long as 14 days (bad). The growing point remains below the soil surface for three
# to four weeks (VE). V1 and V2 stages occur about one week after the plant emerges. Two to three
# weeks after the plant emerges, the V3-V5 stages begin. Cold weather is a high risk at this point.
# Three weeks after the plant emerges, it enters the V6 stage (absorbing greater amounts of
# nutrients). Four weeks after the plant emerges, it enters V8. Flooding at this or any earlier
# stage when the growing point is below ground can kill the corn plants in a few days, especially
# if temperatures are high. Five weeks after the plant emerges, it enters V10. Demand for soil
# nutrients and water are high due to increased growth rate. Eight weeks after the plant emerges,
# it is entering the late vegetative stages.
#
# Age of the Corn Plant           Stage
# 1-33 days*                      VE-V5          33 days
# Next 22-32 days                 V6-V15         60 days
# Next 5-15 days                  V16-R2         70 days
# Next 20-30 days                 R3-R5          95 days
# Next 5-15 days                  R6            105 days
#
# VE Emergence: 30 days after planting        04 weeks after planting - 1 month
# R1 Silking: 55 to 66 days after emergence   11 weeks after planting - 3 months
# R2 Blister: 12 days after silking           13 weeks after planting - 3 1/2 months
# R3 Milk: 20 days after silking              14 weeks after planting - 3 3/4 months
# R4 Dough: 26 days after silking             15 weeks after planting - 3 3/4 months
# R5 Dent: 36 days after silking              17 weeks after planting - 4 months
# R6 Maturity: 55 days after midsilk          19 weeks after planting - 4 1/2 months
#
cat("\014")
rm(list=ls());
library(lubridate);
library(tidyverse);
#
# Configuration
#
directory <- "/Users/User/Desktop/Codigos/bafitis/";
#
# Load libraries
#
source(paste0(directory, "scripts/soybeans/2022-02-10-corn/historic.r"));
# =========================================================================
#
# PLANTING PROGRESS
#
# =========================================================================
#
# Planting progress stages from USDA quick stats data
#
stage_mapping <- tribble(
~Data.Item,                                                ~Item,
"CORN - PROGRESS, 5 YEAR AVG, MEASURED IN PCT PLANTED",    "01 Planted",
"CORN - PROGRESS, 5 YEAR AVG, MEASURED IN PCT EMERGED",    "02 Emerged",
"CORN - PROGRESS, 5 YEAR AVG, MEASURED IN PCT SILKING",    "03 Silking",
"CORN - PROGRESS, 5 YEAR AVG, MEASURED IN PCT DOUGH",      "04 Dough",
"CORN - PROGRESS, 5 YEAR AVG, MEASURED IN PCT DENTED",     "05 Dented",
"CORN - PROGRESS, 5 YEAR AVG, MEASURED IN PCT MATURE",     "06 Mature",
);
progress_data_by_state <- read.csv(paste0(directory, "scripts/soybeans/2022-02-10-corn/usda-crop-progress.csv")) %>%
inner_join(stage_mapping, by="Data.Item") %>%
select(Period, Week.Ending, State, Item, Value)
progress_data_nationwide <- progress_data_by_state %>%
group_by(Period, Week.Ending, Item) %>%
summarize(Value = median(Value), .groups="keep") %>%
ungroup() %>%
pivot_wider(names_from = Item, values_from=Value) %>%
replace(is.na(.), 0)
#print(progress_data_nationwide, n = 100)
# =========================================================================
#
# ANALYSIS
#
# =========================================================================
#
# Selects the analysis of interest
#
analysis <- tribble(
~reference,     ~discount,     ~startMonth,    ~finishMonth,
"CH",           "CN",          11,              2,
"CN",           "CZ",          11,              6,
"CH",           "CH1",         11,              2,
"CK",           "CK1",         11,              4,
"CN",           "CN1",         11,              6,
"CU",           "CU1",          4,              8,
"CZ",           "CZ1",          4,             11,
);
#
# Selects the futures of interest
#
all_futures <- c("CH", "CK", "CN", "CU", "CZ");
#
# Loads data from EOD Data
#
eoddata_current_year <- loadHistoricForDateEODData(directory, "corn", 01, 01, 2008, 31, 12, 2020, all_futures, c()) %>%
mutate(contract = str_sub(contract, 0, 2)) %>%
pivot_wider(names_from="contract", values_from="price")
eoddata_next_year <- loadHistoricForDateEODData(directory, "corn", 01, 01, 2008, 31, 12, 2020, c(), all_futures) %>%
mutate(contract = str_sub(contract, 0, 2)) %>%
pivot_wider(names_from="contract", values_from="price", names_glue='{contract}1')
eoddata <- eoddata_next_year %>%
left_join(eoddata_current_year, by="Date")
#
# Loads data from CME bulletin
#
bulletin_current_year <- loadAssetsForPeriodOnXML(directory, 01, 01, 2021, 31, 12, 2022, all_futures, c()) %>%
mutate(contract = str_sub(contract, 0, 2)) %>%
pivot_wider(names_from="contract", values_from="price")
bulletin_next_year <- loadAssetsForPeriodOnXML(directory, 01, 01, 2021, 31, 12, 2022, c(), all_futures) %>%
mutate(contract = str_sub(contract, 0, 2)) %>%
pivot_wider(names_from="contract", values_from="price", names_glue='{contract}1')
bulletin <- bulletin_next_year %>%
left_join(bulletin_current_year, by="Date")
#
# Merge all data
#
data <- eoddata %>%
union(bulletin) %>%
arrange(Date)
analysisCount <- nrow(analysis)
analysisIndex <- 1
#
# Gets the data for the current analysis
#
analysisItem <- analysis[analysisIndex, ]
reference <- analysisItem$reference
discount <- analysisItem$discount
startMonth <- analysisItem$startMonth
finishMonth <- analysisItem$finishMonth
#
# Calculates the reference year
#
analysis_data <- data
analysis_data <- analysis_data %>%
mutate(year = ifelse(month(Date) >= startMonth, year(Date) + 1, year(Date))) %>%
filter(month(Date) >= startMonth | month(Date) <= finishMonth) %>%
mutate(refdate_year = ifelse(month(Date) >= startMonth, 2019, 2020)) %>%
mutate(refdate = ymd(paste(refdate_year, month(Date), day(Date))));
analysis_data %>% filter(year == 2022)
#
# Calculates the reference year
#
analysis_data <- data
analysis_data <- analysis_data %>%
mutate(year = ifelse(month(Date) >= startMonth, year(Date) + 1, year(Date))) %>%
mutate(punch = ifelse(month(Date) >= startMonth, "1", "")) %>%
filter(month(Date) >= startMonth | month(Date) <= finishMonth) %>%
mutate(refdate_year = ifelse(month(Date) >= startMonth, 2019, 2020)) %>%
mutate(refdate = ymd(paste(refdate_year, month(Date), day(Date))));
analysis_data
analysis_data %>% filter(year == 2022)
analysis_data %>% filter(year == 2022) %>% view()
#
# Calculates the reference year
#
analysis_data <- data
analysis_data <- analysis_data %>%
mutate(year = ifelse(month(Date) >= startMonth, year(Date) + 1, year(Date))) %>%
mutate(ref = ifelse(month(Date) >= startMonth, paste0(reference, "1"), reference)) %>%
mutate(disc = ifelse(month(Date) >= startMonth, paste0(discount, "1"), discount)) %>%
filter(month(Date) >= startMonth | month(Date) <= finishMonth) %>%
mutate(refdate_year = ifelse(month(Date) >= startMonth, 2019, 2020)) %>%
mutate(refdate = ymd(paste(refdate_year, month(Date), day(Date))));
#
# Calculates the spread
#
analysis_data <- analysis_data %>%
rowwise() %>%
mutate(spread := UQ(sym(ref)) - UQ(sym(disc))) %>%
ungroup() %>%
filter(!is.na(spread)) %>%
select(year, refdate, spread)
analysis_data
#
# Calculates the spread
#
analysis_data <- analysis_data %>%
rowwise() %>%
mutate(spread := UQ(sym(paste0(ref))) - UQ(sym(disc))) %>%
ungroup() %>%
filter(!is.na(spread)) %>%
select(year, refdate, spread)
analysis_data
UQ(sym(paste0(ref)))
#
# Calculates the spread
#
analysis_data <- analysis_data %>%
#    rowwise() %>%
mutate(spread := UQ(sym(paste0(ref))) - UQ(sym(disc))) %>%
#   ungroup() %>%
filter(!is.na(spread)) %>%
select(year, refdate, spread)
#
# Calculates the spread
#
analysis_data <- analysis_data %>%
mutate(spread := UQ(sym(reference)) - UQ(sym(discout))) %>%
filter(!is.na(spread)) %>%
select(year, refdate, spread)
#
# Calculates the spread
#
analysis_data <- analysis_data %>%
mutate(spread := UQ(sym(reference)) - UQ(sym(discount))) %>%
filter(!is.na(spread)) %>%
select(year, refdate, spread)
install.packages(zip)
install.packages("zip")
cat("\014")
rm(list = ls());
library(tidyverse);
library(ggplot2);
library(gridExtra);
library(finalfit);
library(kableExtra);
#setwd("C:\\Users\\rafae\\OneDrive\\Documentos\\Mestrado\\Tese\\pattern-matching\\")
setwd("C:\\Users\\User\\Desktop\\Codigos\\pattern-matching\\")
#setwd("~/Mestrado/tese/pattern-matching")
#
# Configuracao
#
baseDirectory <- "data\\";
# ============================================================
#
# CARGA DOS DADOS
#
# ============================================================
#
# Carga das correcoes
#
correcaoColSpec <- cols(
Participante = col_character(),
ExpProg = col_character(),
ExpNET = col_character(),
Form = col_character(),
Q1 = col_double(),
Q2 = col_double(),
Q3 = col_double(),
Q4 = col_double(),
Q5 = col_double(),
Q6 = col_double(),
Q7 = col_double(),
Q8 = col_double()
)
correcao <- read_delim(paste0(baseDirectory, "final-correcao-questionarios.csv"), delim=";", col_types=correcaoColSpec);
#
# Carga das composicoes dos formularios
#
composicaoColSpec <- cols(
Form = col_character(),
Q1 = col_character(),
Q2 = col_character(),
Q3 = col_character(),
Q4 = col_character(),
Q5 = col_character(),
Q6 = col_character(),
Q7 = col_character(),
Q8 = col_character()
)
composicao <- read_delim(paste0(baseDirectory, "composicao-questionarios.csv"), delim=";", col_types=composicaoColSpec);
#
# Organizacao e recodificacao dos dados
#
experiencia <- c("Menos que 1 ano" = "< 1 ano",
"Mais que 1 ano e menor que 3 anos" = "1-3 anos",
"Mais que 3 anos e menor que 5 anos" = "3-5 anos",
"Mais que 5 anos" = "5+ anos")
composicao <- composicao %>%
gather(Questao, Tipo, -Form);
correcao <- correcao %>%
mutate(ExpProg = recode(ExpProg, !!!experiencia)) %>%
mutate(ExpNET = recode(ExpNET, !!!experiencia)) %>%
gather(Questao, Acerto, -Participante, -ExpNET, -ExpProg, -Form) %>%
inner_join(composicao, by=c("Form"="Form", "Questao"="Questao"))
# ============================================================
#
# ANALISE DE CONSISTENCIA
#
# ============================================================
#
# - equilibrado, 672 respostas por tipo de resolução.
#
# - desequilibrado, 40 respostas para F1, 39 para F2, 57 para F3 e 32 para F4
#
# - equilibrado, 158 respostas por questão.
#
correcao %>%
group_by(Tipo) %>%
summarise(Respostas = n());
correcao %>%
group_by(Form) %>%
summarise(Respostas = n() / 8);
correcao %>%
group_by(Questao) %>%
summarise(Respostas = n());
# ============================================================
#
# DISTRIBUICAO DOS PARTICIPANTES
#
# ============================================================
#
# Número total de participantes
#
correcao %>%
summarize(count = n() / 8)
#
# Participantes agrupados por experiência em programação: a maioria
# dos participantes é experiente em programação
#
correcao %>%
group_by(ExpProg) %>%
summarize(count = n() / 8, .groups="keep") %>%
ungroup() %>%
mutate(perc = 100 * count / sum(count))
#
# Participantes agrupados por experiência em programação: boa
# distribuição de experiência com C#
#
correcao %>%
group_by(ExpNET) %>%
summarize(count = n() / 8, .groups="keep") %>%
ungroup() %>%
mutate(perc = 100 * count / sum(count))
# ============================================================
#
# ANALISE DE NOTAS
#
# ============================================================
#
# Nota por participante - maior parte entre 6 e 8
#
notaParticipante <- correcao %>%
group_by(Participante, ExpProg, ExpNET) %>%
summarise(Nota = sum(Acerto), .groups="drop");
ggplot(notaParticipante, aes(Nota)) +
geom_histogram(binwidth = 1, fill="blue", color="white", size=2) +
ylab("Número de participantes") +
theme_bw();
#
# Média das notas de todos os participantes
#
media <- notaParticipante %>%
summarize(mean = mean(Nota), .groups="drop")
#
# Juntando o menor grupo (3 pessoas) e recalculando as notas
#
correcao <- correcao %>%
mutate(ExpProg = if_else(ExpProg == "1-3 anos", "Até 3 anos", ExpProg)) %>%
mutate(ExpProg = if_else(ExpProg == "< 1 ano", "Até 3 anos", ExpProg));
notaParticipante <- correcao %>%
group_by(Participante, ExpProg, ExpNET, Form) %>%
summarise(Nota = sum(Acerto), .groups = 'drop');
#
# Nota média por formulário
#
notaFormulario <- notaParticipante %>%
group_by(Form) %>%
summarise(NotaMedia = mean(Nota), NotaDesvio = sd(Nota), .groups = 'drop');
kruskal.test(notaParticipante$Nota, notaParticipante$Form)
#
# Nota média por nível de experiência de programação - mais junior, nota mais baixa (diferença não significativa)
#
notaMediaExpProg <- notaParticipante %>%
group_by(ExpProg) %>%
summarise(NotaMedia = mean(Nota), NotaDesvio = sd(Nota));
kruskal.test(notaParticipante$Nota, notaParticipante$ExpProg)
#
# Nota média por nível de experiência em .NET - mais junior, nota mais baixa (diferença não significativa)
#
notaMediaExpNET <- notaParticipante %>%
group_by(ExpNET) %>%
summarise(NotaMedia = mean(Nota), NotaDesvio = sd(Nota));
kruskal.test(notaParticipante$Nota, notaParticipante$ExpNET)
# precisa de um recode de ExpNET para fator?
#pairwise.wilcox.test(notaParticipante$Nota, notaParticipante$ExpNET, p.adj = "bonf");
#
# notaMediaExpNET %>%
#   kbl(col.names = c("Experiência", "Nota"), booktabs = TRUE ,format = 'html' ,table.attr = "style='width:450px;height:450px'") %>%
#   kable_styling(latex_options = "striped", full_width = T) %>%
#   column_spec(1, width = "6cm") %>%
#   kable_classic(full_width = F);
# ============================================================
#
# ANALISE DE ACERTOS POR TIPO
#
# ============================================================
#
# Acertos por tipo
#
acertosTipo <- correcao %>%
group_by(Tipo) %>%
summarise(Acertos = sum(Acerto), .groups="drop") %>%
mutate(Percentual = 100 * Acertos / 672);
#
# Acertos por tipo e questao
#
acertosQuestaoTipo <- correcao %>%
group_by(Questao, Tipo) %>%
summarise(Acertos = sum(Acerto), Total=n(), .groups="drop") %>%
mutate(Percentual = 100 * Acertos / Total) %>%
pivot_wider(names_from = Tipo, values_from=c(Acertos, Total, Percentual)) %>%
select(Questao, Acertos_I, Total_I, Percentual_I, Acertos_P, Total_P, Percentual_P)
mxAcertosQuestaoTipo <- acertosQuestaoTipo %>%
select(Percentual_I, Percentual_P) %>%
as.matrix() %>%
t()
chisq.test(mxAcertosQuestaoTipo);
#
# Acertos por tipo e questao
#
acertosQuestaoTipo <- correcao %>%
group_by(Questao, Tipo) %>%
summarise(Acertos = sum(Acerto), Total=n(), .groups="drop") %>%
mutate(Percentual = 100 * Acertos / Total) %>%
pivot_wider(names_from = Tipo, values_from=c(Acertos, Total, Percentual)) %>%
select(Questao, Acertos_I, Total_I, Percentual_I, Acertos_P, Total_P, Percentual_P)
mxAcertosQuestaoTipo <- acertosQuestaoTipo %>%
select(Percentual_I, Percentual_P) %>%
as.matrix() %>%
t()
mxAcertosQuestaoTipo
#
# Acertos por formulario - pattern matching vence em 2 de 4 casos (diferença não significativa)
#
acertosFormTipo <- correcao %>%
group_by(Form, Tipo) %>%
summarise(Acertos = sum(Acerto), .groups = 'drop') %>%
spread(Tipo, Acertos);
mxAcertosFormTipo <- matrix(as.numeric(as.matrix(acertosFormTipo)[,2:3]), ncol=4, byrow=TRUE);
chisq.test(mxAcertosFormTipo);
mxAcertosFormTipo
#
# Acertos por experiência em programação - pattern matching vence nos 2 de 3 casos com mais experiência (sem diferença significativa)
#
acertosExpProgTipo <- correcao %>%
group_by(ExpProg, Tipo) %>%
summarise(Acertos = sum(Acerto), .groups="drop") %>%
spread(Tipo, Acertos);
mxAcertosExpProgTipo <- matrix(as.numeric(as.matrix(acertosExpProgTipo)[,2:3]), ncol=3, byrow=TRUE);
mxAcertosExpProgTipo
correcao
#
# Acertos por experiência em .NET - pattern matching vence em 1 de 4 casos (vence nos mais experientes, sem diferença significativa)
#
acertosExpNETTipo <- correcao %>%
group_by(ExpNET, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n()) %>%
pivot_wider(names_from=Tipo, values_from=c(Acertos, Percentual));
#
# Acertos por experiência em .NET - pattern matching vence em 1 de 4 casos (vence nos mais experientes, sem diferença significativa)
#
acertosExpNETTipo <- correcao %>%
group_by(ExpNET, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups="drop") %>%
pivot_wider(names_from=Tipo, values_from=c(Acertos, Percentual));
acertosExpNETTipo
mxAcertosExpNETTipo <- matrix(as.numeric(as.matrix(acertosExpNETTipo)[,2:3]), ncol=4, byrow=TRUE);
mxAcertosExpNETTipo
#
# Acertos por experiência em .NET - pattern matching vence em 1 de 4 casos (vence nos mais experientes, sem diferença significativa)
#
acertosExpNETTipo <- correcao %>%
group_by(ExpNET, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups="drop") %>%
pivot_wider(names_from=Tipo, values_from=c(Acertos, Percentual));
#
# Acertos por experiência em programação - pattern matching vence nos 2 de 3 casos com mais experiência (sem diferença significativa)
#
acertosExpProgTipo <- correcao %>%
group_by(ExpProg, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups="drop") %>%
pivot_wider(names_from=Tipo, values_from=c(Acertos, Percentual));
acertosExpProgTipo
acertosExpProgTipo
mxAcertosExpProgTipo <- matrix(as.numeric(as.matrix(acertosExpProgTipo %>% select(ExpProg, Acertos_I, Acertos_P))[,2:3]), ncol=3, byrow=TRUE);
chisq.test(mxAcertosExpProgTipo);
#
# Acertos por experiência em .NET - pattern matching vence em 1 de 4 casos (vence nos mais experientes, sem diferença significativa)
#
acertosExpNETTipo <- correcao %>%
group_by(ExpNET, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups="drop") %>%
pivot_wider(names_from=Tipo, values_from=c(Acertos, Percentual));
acertosExpNETTipo
mxAcertosExpNETTipo <- matrix(as.numeric(as.matrix(acertosExpNETTipo %>% select(ExpProg, Acertos_I, Acertos_P))[,2:3]), ncol=4, byrow=TRUE);
acertosExpNETTipo
mxAcertosExpNETTipo <- matrix(as.numeric(as.matrix(acertosExpNETTipo %>% select(ExpNET, Acertos_I, Acertos_P))[,2:3]), ncol=4, byrow=TRUE);
mxAcertosExpNETTipo
chisq.test(mxAcertosExpNETTipo);
mxAcertosExpProgTipo <- matrix(as.numeric(as.matrix(acertosExpProgTipo %>% select(ExpProg, Acertos_I, Acertos_P))[,2:3]), ncol=3, byrow=TRUE);
mxAcertosExpProgTipo
chisq.test(mxAcertosExpNETTipo);
#
# Acertos por formulario - pattern matching vence em 2 de 4 casos (diferença não significativa)
#
acertosFormTipo <- correcao %>%
group_by(Form, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups = 'drop') %>%
spread(Tipo, Acertos);
acertosFormTipo
correcao %>%
group_by(Form, Tipo)
correcao %>%
group_by(Form, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups = 'drop')
#
# Acertos por formulario - pattern matching vence em 2 de 4 casos (diferença não significativa)
#
acertosFormTipo <- correcao %>%
group_by(Form, Tipo) %>%
summarise(Acertos = sum(Acerto), Percentual=100 * sum(Acerto) / n(), .groups = 'drop') %>%
pivot_wider(names_from=Tipo, values_from=c(Acertos, Percentual));
acertosFormTipo
acertosFormTipo
mxAcertosFormTipo <- matrix(as.numeric(as.matrix(acertosFormTipo %>% select(Form, Acertos_I, Acertos_P))[,2:3]), ncol=4, byrow=TRUE);
chisq.test(mxAcertosFormTipo);
